{"version":3,"names":["eventEmitter","NativeEventEmitter","NativeModules","StripeSdk","fetchPaymentMethodsCallback","attachPaymentMethodCallback","detachPaymentMethodCallback","setSelectedPaymentOptionCallback","fetchSelectedPaymentOptionCallback","setupIntentClientSecretForCustomerAttachCallback","initialize","params","customerAdapterOverrides","customerAdapter","configureCustomerAdapterEventListeners","NativeStripeSdk","initCustomerSheet","error","fetchPaymentMethods","remove","addListener","paymentMethods","customerAdapterFetchPaymentMethodsCallback","Error","attachPaymentMethod","paymentMethodId","paymentMethod","customerAdapterAttachPaymentMethodCallback","detachPaymentMethod","customerAdapterDetachPaymentMethodCallback","setSelectedPaymentOption","paymentOption","customerAdapterSetSelectedPaymentOptionCallback","fetchSelectedPaymentOption","customerAdapterFetchSelectedPaymentOptionCallback","setupIntentClientSecretForCustomerAttach","clientSecret","customerAdapterSetupIntentClientSecretForCustomerAttachCallback","present","presentCustomerSheet","retrievePaymentOptionSelection","retrieveCustomerSheetPaymentOptionSelection","CustomerSheet","visible","presentationStyle","animationStyle","style","appearance","setupIntentClientSecret","customerId","customerEphemeralKeySecret","merchantDisplayName","headerTextForSelectionScreen","defaultBillingDetails","billingDetailsCollectionConfiguration","returnURL","removeSavedPaymentMethodMessage","applePayEnabled","googlePayEnabled","timeout","onResult","React","useEffect","then","initResult","presentResult","CustomerSheetBeta"],"sources":["CustomerSheet.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  NativeEventEmitter,\n  NativeModules,\n  EmitterSubscription,\n} from 'react-native';\nimport NativeStripeSdk from '../NativeStripeSdk';\nimport type {\n  CustomerSheetInitParams,\n  CustomerSheetPresentParams,\n  CustomerSheetResult,\n  CustomerSheetError,\n  StripeError,\n  CustomerAdapter,\n} from '../types';\n\nconst eventEmitter = new NativeEventEmitter(NativeModules.StripeSdk);\nlet fetchPaymentMethodsCallback: EmitterSubscription | null = null;\nlet attachPaymentMethodCallback: EmitterSubscription | null = null;\nlet detachPaymentMethodCallback: EmitterSubscription | null = null;\nlet setSelectedPaymentOptionCallback: EmitterSubscription | null = null;\nlet fetchSelectedPaymentOptionCallback: EmitterSubscription | null = null;\nlet setupIntentClientSecretForCustomerAttachCallback: EmitterSubscription | null =\n  null;\n\n/** Initialize an instance of Customer Sheet with your desired configuration. */\nconst initialize = async (\n  params: CustomerSheetInitParams\n): Promise<{ error?: StripeError<CustomerSheetError> }> => {\n  let customerAdapterOverrides = {};\n  if (params.customerAdapter) {\n    customerAdapterOverrides = configureCustomerAdapterEventListeners(\n      params.customerAdapter\n    );\n  }\n\n  try {\n    const { error } = await NativeStripeSdk.initCustomerSheet(\n      params,\n      customerAdapterOverrides\n    );\n    if (error) {\n      return { error };\n    }\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nconst configureCustomerAdapterEventListeners = (\n  customerAdapter: CustomerAdapter\n): { [Property in keyof CustomerAdapter]: boolean } => {\n  if (customerAdapter.fetchPaymentMethods) {\n    fetchPaymentMethodsCallback?.remove();\n    fetchPaymentMethodsCallback = eventEmitter.addListener(\n      'onCustomerAdapterFetchPaymentMethodsCallback',\n      async () => {\n        if (customerAdapter.fetchPaymentMethods) {\n          const paymentMethods = await customerAdapter.fetchPaymentMethods();\n          await NativeStripeSdk.customerAdapterFetchPaymentMethodsCallback(\n            paymentMethods\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `fetchPaymentMethods` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.attachPaymentMethod) {\n    attachPaymentMethodCallback?.remove();\n    attachPaymentMethodCallback = eventEmitter.addListener(\n      'onCustomerAdapterAttachPaymentMethodCallback',\n      async ({ paymentMethodId }: { paymentMethodId: string }) => {\n        if (customerAdapter.attachPaymentMethod) {\n          const paymentMethod = await customerAdapter.attachPaymentMethod(\n            paymentMethodId\n          );\n          await NativeStripeSdk.customerAdapterAttachPaymentMethodCallback(\n            paymentMethod\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `attachPaymentMethod` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.detachPaymentMethod) {\n    detachPaymentMethodCallback?.remove();\n    detachPaymentMethodCallback = eventEmitter.addListener(\n      'onCustomerAdapterDetachPaymentMethodCallback',\n      async ({ paymentMethodId }: { paymentMethodId: string }) => {\n        if (customerAdapter.detachPaymentMethod) {\n          const paymentMethod = await customerAdapter.detachPaymentMethod(\n            paymentMethodId\n          );\n          await NativeStripeSdk.customerAdapterDetachPaymentMethodCallback(\n            paymentMethod\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `detachPaymentMethod` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.setSelectedPaymentOption) {\n    setSelectedPaymentOptionCallback?.remove();\n    setSelectedPaymentOptionCallback = eventEmitter.addListener(\n      'onCustomerAdapterSetSelectedPaymentOptionCallback',\n      async ({ paymentOption }: { paymentOption: string }) => {\n        if (customerAdapter.setSelectedPaymentOption) {\n          await customerAdapter.setSelectedPaymentOption(paymentOption);\n          await NativeStripeSdk.customerAdapterSetSelectedPaymentOptionCallback();\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `setSelectedPaymentOption` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.fetchSelectedPaymentOption) {\n    fetchSelectedPaymentOptionCallback?.remove();\n    fetchSelectedPaymentOptionCallback = eventEmitter.addListener(\n      'onCustomerAdapterFetchSelectedPaymentOptionCallback',\n      async () => {\n        if (customerAdapter.fetchSelectedPaymentOption) {\n          const paymentOption =\n            await customerAdapter.fetchSelectedPaymentOption();\n          await NativeStripeSdk.customerAdapterFetchSelectedPaymentOptionCallback(\n            paymentOption\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `fetchSelectedPaymentOption` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  if (customerAdapter.setupIntentClientSecretForCustomerAttach) {\n    setupIntentClientSecretForCustomerAttachCallback?.remove();\n    setupIntentClientSecretForCustomerAttachCallback = eventEmitter.addListener(\n      'onCustomerAdapterSetupIntentClientSecretForCustomerAttachCallback',\n      async () => {\n        if (customerAdapter.setupIntentClientSecretForCustomerAttach) {\n          const clientSecret =\n            await customerAdapter.setupIntentClientSecretForCustomerAttach();\n          await NativeStripeSdk.customerAdapterSetupIntentClientSecretForCustomerAttachCallback(\n            clientSecret\n          );\n        } else {\n          throw new Error(\n            '[@stripe/stripe-react-native] Tried to call `setupIntentClientSecretForCustomerAttach` on your CustomerAdapter, but no matching method was found.'\n          );\n        }\n      }\n    );\n  }\n\n  return {\n    fetchPaymentMethods: !!customerAdapter.fetchPaymentMethods,\n    attachPaymentMethod: !!customerAdapter.attachPaymentMethod,\n    detachPaymentMethod: !!customerAdapter.detachPaymentMethod,\n    setSelectedPaymentOption: !!customerAdapter.setSelectedPaymentOption,\n    fetchSelectedPaymentOption: !!customerAdapter.fetchSelectedPaymentOption,\n    setupIntentClientSecretForCustomerAttach:\n      !!customerAdapter.setupIntentClientSecretForCustomerAttach,\n  };\n};\n\n/** Launches the Customer Sheet UI. */\nconst present = async (\n  params: CustomerSheetPresentParams = {}\n): Promise<CustomerSheetResult> => {\n  try {\n    return await NativeStripeSdk.presentCustomerSheet(params);\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\n/**\n * You can use this to obtain the selected payment method without presenting the CustomerSheet.\n * This will return an error if you have not called `.initialize`\n */\nconst retrievePaymentOptionSelection =\n  async (): Promise<CustomerSheetResult> => {\n    try {\n      return await NativeStripeSdk.retrieveCustomerSheetPaymentOptionSelection();\n    } catch (error: any) {\n      return {\n        error,\n      };\n    }\n  };\n\n/**\n *  Props\n */\nexport type Props = {\n  /** Whether the sheet is visible. Defaults to false. */\n  visible: boolean;\n  /** Called when the user submits, dismisses, or cancels the sheet, or when an error occurs. */\n  onResult: (result: CustomerSheetResult) => void;\n} & CustomerSheetInitParams &\n  CustomerSheetPresentParams;\n\n/**\n * A component wrapper around the Customer Sheet functions. Upon passing `true` to the `visible` prop,\n * Customer Sheet will call `initialize` and `present`, and the result(s) will be passed through to the\n * onResult callback.\n *\n * @example\n * ```ts\n *  const [selectedPaymentOption, setSelectedPaymentOption] = React.useState(null);\n *  const [customerSheetVisible, setCustomerSheetVisible] = React.useState(false);\n *\n *  return (\n *    <CustomerSheet\n *      visible={customerSheetVisible}\n *      customerEphemeralKeySecret={ephemeralKeySecret}\n *      customerId={customer}\n *      returnURL={'stripe-example://stripe-redirect'}\n *      onResult={({ error, paymentOption, paymentMethod }) => {\n *        setCustomerSheetVisible(false);\n *        if (error) {\n *          Alert.alert(error.code, error.localizedMessage);\n *        }\n *        if (paymentOption) {\n *          setSelectedPaymentOption(paymentOption);\n *          console.log(JSON.stringify(paymentOption, null, 2));\n *        }\n *        if (paymentMethod) {\n *          console.log(JSON.stringify(paymentMethod, null, 2));\n *        }\n *      }}\n *    />\n *  );\n * ```\n * @param __namedParameters Props\n * @returns JSX.Element\n * @category ReactComponents\n */\nfunction CustomerSheet({\n  visible,\n  presentationStyle,\n  animationStyle,\n  style,\n  appearance,\n  setupIntentClientSecret,\n  customerId,\n  customerEphemeralKeySecret,\n  merchantDisplayName,\n  headerTextForSelectionScreen,\n  defaultBillingDetails,\n  billingDetailsCollectionConfiguration,\n  returnURL,\n  removeSavedPaymentMethodMessage,\n  applePayEnabled,\n  googlePayEnabled,\n  timeout,\n  onResult,\n  customerAdapter,\n}: Props) {\n  React.useEffect(() => {\n    if (visible) {\n      initialize({\n        style,\n        appearance,\n        setupIntentClientSecret,\n        customerId,\n        customerEphemeralKeySecret,\n        merchantDisplayName,\n        headerTextForSelectionScreen,\n        defaultBillingDetails,\n        billingDetailsCollectionConfiguration,\n        returnURL,\n        removeSavedPaymentMethodMessage,\n        applePayEnabled,\n        googlePayEnabled,\n        customerAdapter,\n      }).then((initResult) => {\n        if (initResult.error) {\n          onResult(initResult);\n        } else {\n          present({\n            timeout,\n            presentationStyle,\n            animationStyle,\n          }).then((presentResult) => {\n            onResult(presentResult);\n          });\n        }\n      });\n    }\n    // Only run this hook when visible prop changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible]);\n\n  return null;\n}\n\n/**\n * The Customer Sheet is a prebuilt UI component that lets your customers manage their saved payment methods.\n */\nexport const CustomerSheetBeta = {\n  CustomerSheet,\n  initialize,\n  present,\n  retrievePaymentOptionSelection,\n};\n"],"mappings":"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"}