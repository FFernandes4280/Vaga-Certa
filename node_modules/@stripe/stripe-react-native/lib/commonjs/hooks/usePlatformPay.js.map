{"version":3,"names":["usePlatformPay","useStripe","isPlatformPaySupported","confirmPlatformPaySetupIntent","confirmPlatformPayPayment","createPlatformPayPaymentMethod","createPlatformPayToken","dismissPlatformPay","updatePlatformPaySheet","canAddCardToWallet","openPlatformPaySetup","useState","loading","setLoading","_isPlatformPaySupported","useCallback","params","result","_confirmPlatformPaySetupIntent","clientSecret","_confirmPlatformPayPayment","_createPlatformPayPaymentMethod","_createPlatformPayToken","_dismissPlatformPay","_updatePlatformPaySheet","_canAddCardToWallet","_openPlatformPaySetup"],"sources":["usePlatformPay.tsx"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport type {\n  PlatformPay,\n  CanAddCardToWalletParams,\n  CanAddCardToWalletResult,\n} from '../types';\nimport { useStripe } from './useStripe';\n\n/**\n * usePlatformPay hook. Access all Apple and Google Pay functionality with this hook.\n */\nexport function usePlatformPay() {\n  const {\n    isPlatformPaySupported,\n    confirmPlatformPaySetupIntent,\n    confirmPlatformPayPayment,\n    createPlatformPayPaymentMethod,\n    createPlatformPayToken,\n    dismissPlatformPay,\n    updatePlatformPaySheet,\n    canAddCardToWallet,\n    openPlatformPaySetup,\n  } = useStripe();\n  const [loading, setLoading] = useState(false);\n\n  const _isPlatformPaySupported = useCallback(\n    async (params?: { googlePay?: PlatformPay.IsGooglePaySupportedParams }) => {\n      setLoading(true);\n\n      const result = await isPlatformPaySupported(params);\n      setLoading(false);\n\n      return result;\n    },\n    [isPlatformPaySupported]\n  );\n\n  const _confirmPlatformPaySetupIntent = useCallback(\n    async (clientSecret: string, params: PlatformPay.ConfirmParams) => {\n      setLoading(true);\n\n      const result = await confirmPlatformPaySetupIntent(clientSecret, params);\n      setLoading(false);\n\n      return result;\n    },\n    [confirmPlatformPaySetupIntent]\n  );\n\n  const _confirmPlatformPayPayment = useCallback(\n    async (clientSecret: string, params: PlatformPay.ConfirmParams) => {\n      setLoading(true);\n\n      const result = await confirmPlatformPayPayment(clientSecret, params);\n      setLoading(false);\n\n      return result;\n    },\n    [confirmPlatformPayPayment]\n  );\n\n  const _createPlatformPayPaymentMethod = useCallback(\n    async (params: PlatformPay.PaymentMethodParams) => {\n      setLoading(true);\n\n      const result = await createPlatformPayPaymentMethod(params);\n      setLoading(false);\n\n      return result;\n    },\n    [createPlatformPayPaymentMethod]\n  );\n\n  const _createPlatformPayToken = useCallback(\n    async (params: PlatformPay.PaymentMethodParams) => {\n      setLoading(true);\n\n      const result = await createPlatformPayToken(params);\n      setLoading(false);\n\n      return result;\n    },\n    [createPlatformPayToken]\n  );\n\n  const _dismissPlatformPay = useCallback(async () => {\n    setLoading(true);\n\n    const result = await dismissPlatformPay();\n    setLoading(false);\n\n    return result;\n  }, [dismissPlatformPay]);\n\n  const _updatePlatformPaySheet = useCallback(\n    async (params: {\n      applePay: {\n        cartItems: Array<PlatformPay.CartSummaryItem>;\n        shippingMethods: Array<PlatformPay.ShippingMethod>;\n        errors: Array<PlatformPay.ApplePaySheetError>;\n      };\n    }) => {\n      setLoading(true);\n\n      const result = await updatePlatformPaySheet(params);\n      setLoading(false);\n\n      return result;\n    },\n    [updatePlatformPaySheet]\n  );\n\n  const _canAddCardToWallet = useCallback(\n    async (\n      params: CanAddCardToWalletParams\n    ): Promise<CanAddCardToWalletResult> => {\n      setLoading(true);\n\n      const result = await canAddCardToWallet(params);\n      setLoading(false);\n\n      return result;\n    },\n    [canAddCardToWallet]\n  );\n\n  const _openPlatformPaySetup = useCallback(async (): Promise<void> => {\n    return openPlatformPaySetup();\n  }, [openPlatformPaySetup]);\n\n  return {\n    /** Use this boolean to present a spinner or other similar loading screen. `true` if the SDK is currently processing, `false` if it is not. */\n    loading,\n    /**\n     * Check if the relevant native wallet (Apple Pay on iOS, Google Pay on Android) is supported.\n     * @returns A boolean indicating whether or not the native wallet is supported.\n     */\n    isPlatformPaySupported: _isPlatformPaySupported,\n    /**\n     * Launches the relevant native wallet sheet (Apple Pay on iOS, Google Pay on Android) in order to confirm a Stripe [SetupIntent](https://stripe.com/docs/api/setup_intents).\n     * @param clientSecret The client secret of the SetupIntent.\n     * @param params an object describing the Apple Pay and Google Pay configurations.\n     * @returns An object with an error field if something went wrong or the flow was cancelled, otherwise an object with both `setupIntent` and `paymentMethod` fields.\n     */\n    confirmPlatformPaySetupIntent: _confirmPlatformPaySetupIntent,\n    /**\n     * Launches the relevant native wallet sheet (Apple Pay on iOS, Google Pay on Android) in order to confirm a Stripe [PaymentIntent](https://stripe.com/docs/api/payment_intents).\n     * @param clientSecret The client secret of the PaymentIntent.\n     * @param params an object describing the Apple Pay and Google Pay configurations.\n     * @returns An object with an error field if something went wrong or the flow was cancelled, otherwise an object with both `paymentIntent` and `paymentMethod` fields.\n     */\n    confirmPlatformPayPayment: _confirmPlatformPayPayment,\n    /**\n     * Launches the relevant native wallet sheet (Apple Pay on iOS, Google Pay on Android) in order to create a Stripe [PaymentMethod](https://stripe.com/docs/api/payment_methods) and [token](https://stripe.com/docs/api/tokens).\n     * @param params an object describing the Apple Pay and Google Pay configurations.\n     * @returns An object with an error field if something went wrong or the flow was cancelled, otherwise an object with both `paymentMethod` and `token` fields.\n     */\n    createPlatformPayPaymentMethod: _createPlatformPayPaymentMethod,\n    /**\n     * @deprecated The Tokens API is deprecated, you should use Payment Methods and `createPlatformPayPaymentMethod` instead.  Launches the relevant native wallet sheet (Apple Pay on iOS, Google Pay on Android) in order to create a Stripe [token](https://stripe.com/docs/api/tokens).\n     * @param params an object describing the Apple Pay and Google Pay configurations.\n     * @returns An object with an error field if something went wrong or the flow was cancelled, otherwise an object with a `token` field.\n     */\n    createPlatformPayToken: _createPlatformPayToken,\n    /**\n     * Dismiss the Apple Pay sheet if it is open. iOS only, this is a no-op on Android.\n     * @returns A boolean indicating whether or not the sheet was successfully closed. Will return false if the Apple Pay sheet was not open.\n     */\n    dismissPlatformPay: _dismissPlatformPay,\n    /**\n     * Update different items on the Apple Pay sheet, including the summary items, the shipping methods, and any errors shown. iOS only, this is a no-op on Android.\n     * @param cartItems An array of payment summary items to display in the Apple Pay sheet.\n     * @param shippingMethods An array of shipping methods to display in the Apple Pay sheet.\n     * @param errors An array of errors associated with the user's input that must be corrected to proceed with payment. These errors will be shown in the Apple Pay sheet.\n     *\n     * @returns An object with an optional 'error' field, which is only populated if something went wrong.\n     */\n    updatePlatformPaySheet: _updatePlatformPaySheet,\n    /**\n     * Check if the app & device support adding this card to the native wallet.\n     * @param params An object containing fields for `primaryAccountIdentifier`, `cardLastFour`, and `testEnv`.\n     *\n     * @returns A promise resolving to an object of type CanAddCardToWalletResult. Check the `canAddCard` field, if it's true, you should show the `<AddToWalletButton />`\n     */\n    canAddCardToWallet: _canAddCardToWallet,\n    /**\n     * iOS only, this is a no-op on Android. Use this method to move users to the interface for adding credit cards.\n     * This method transfers control to the Wallet app on iPhone or to the Settings\n     * app on iPad. For devices that donâ€™t support Apple Pay, this method does nothing.\n     */\n    openPlatformPaySetup: _openPlatformPaySetup,\n  };\n}\n"],"mappings":"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"}