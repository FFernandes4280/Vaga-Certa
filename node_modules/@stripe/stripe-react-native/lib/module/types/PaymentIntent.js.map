{"version":3,"names":["Status"],"sources":["PaymentIntent.ts"],"sourcesContent":["import type { StripeError } from '.';\nimport type { Address, BillingDetails } from './Common';\nimport type { Result as PaymentMethodResult } from './PaymentMethod';\nimport type { NextAction } from './NextAction';\nimport type * as PaymentMethod from './PaymentMethod';\nimport type { FormDetails } from './components/AuBECSDebitFormComponent';\nimport type { BankAcccountHolderType, BankAcccountType } from './Token';\nexport interface Result {\n  id: string;\n  amount: number;\n  /** The UNIX timestamp (in milliseconds) of the date this PaymentIntent was created. */\n  created: string;\n  currency: string;\n  status: Status;\n  description: string | null;\n  receiptEmail: string | null;\n  canceledAt: string | null;\n  clientSecret: string;\n  livemode: boolean;\n  /** @deprecated Use paymentMethod.id instead. */\n  paymentMethodId: string;\n  paymentMethod: PaymentMethodResult | null;\n  captureMethod: CaptureMethod;\n  confirmationMethod: CaptureMethod;\n  lastPaymentError: LastPaymentError | null;\n  shipping: ShippingDetails | null;\n  nextAction: NextAction | null;\n}\n\nexport type CaptureMethod = 'Automatic' | 'Manual';\n\nexport type ConfirmParams =\n  | CardParams\n  | IdealParams\n  | OxxoParams\n  | P24Params\n  | AlipayParams\n  | GiropayParams\n  | SepaParams\n  | EpsParams\n  | AuBecsDebitParams\n  | SofortParams\n  | GrabPayParams\n  | FPXParams\n  | AfterpayClearpayParams\n  | KlarnaParams\n  // | WeChatPayParams\n  | BancontactParams\n  | USBankAccountParams\n  | PayPalParams\n  | AffirmParams\n  | CashAppParams\n  | RevolutPayParams;\n\nexport type ConfirmOptions = PaymentMethod.ConfirmOptions;\n\nexport type LastPaymentError = StripeError<string> & {\n  paymentMethod: PaymentMethodResult;\n};\n\nexport type FutureUsage = 'OffSession' | 'OnSession';\n\nexport interface ShippingDetails {\n  address: Required<Address>;\n  name: string;\n  carrier: string;\n  phone: string;\n  trackingNumber: string;\n}\n\nexport enum Status {\n  Succeeded = 'Succeeded',\n  RequiresPaymentMethod = 'RequiresPaymentMethod',\n  RequiresConfirmation = 'RequiresConfirmation',\n  Canceled = 'Canceled',\n  Processing = 'Processing',\n  RequiresAction = 'RequiresAction',\n  RequiresCapture = 'RequiresCapture',\n  Unknown = 'Unknown',\n}\n\nexport type MandateData = {\n  customerAcceptance: {\n    online: {\n      ipAddress: string;\n      userAgent: string;\n    };\n  };\n};\n\nexport type CardParams =\n  | {\n      paymentMethodType: 'Card';\n      paymentMethodData?: {\n        token?: string;\n        billingDetails?: BillingDetails;\n        mandateData?: MandateData;\n      };\n    }\n  | {\n      paymentMethodType: 'Card';\n      paymentMethodData: {\n        paymentMethodId: string;\n        cvc?: string;\n        billingDetails?: BillingDetails;\n        mandateData?: MandateData;\n      };\n    };\n\nexport interface IdealParams {\n  paymentMethodType: 'Ideal';\n  paymentMethodData?: {\n    bankName?: string;\n    billingDetails?: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport interface FPXParams {\n  paymentMethodType: 'Fpx';\n  paymentMethodData?: { testOfflineBank?: boolean; mandateData?: MandateData };\n}\n\nexport interface AlipayParams {\n  paymentMethodType: 'Alipay';\n  paymentMethodData?: {\n    mandateData?: MandateData;\n  };\n}\n\nexport interface OxxoParams {\n  paymentMethodType: 'Oxxo';\n  paymentMethodData: {\n    billingDetails: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport interface SofortParams {\n  paymentMethodType: 'Sofort';\n  paymentMethodData: {\n    country: string;\n    billingDetails: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\nexport interface GrabPayParams {\n  paymentMethodType: 'GrabPay';\n  paymentMethodData?: {\n    billingDetails?: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport interface BancontactParams {\n  paymentMethodType: 'Bancontact';\n  paymentMethodData: {\n    billingDetails: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport interface SepaParams {\n  paymentMethodType: 'SepaDebit';\n  paymentMethodData: {\n    iban: string;\n    billingDetails: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport interface GiropayParams {\n  paymentMethodType: 'Giropay';\n  paymentMethodData: {\n    billingDetails: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport interface AfterpayClearpayParams {\n  paymentMethodType: 'AfterpayClearpay';\n  paymentMethodData: {\n    shippingDetails: BillingDetails;\n    billingDetails: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport type KlarnaParams = {\n  paymentMethodType: 'Klarna';\n  paymentMethodData: {\n    billingDetails: Pick<Required<BillingDetails>, 'email'> & {\n      address: Pick<Required<Address>, 'country'>;\n    } & BillingDetails;\n    shippingDetails?: BillingDetails;\n    mandateData?: MandateData;\n  };\n};\n\nexport interface EpsParams {\n  paymentMethodType: 'Eps';\n  paymentMethodData: {\n    billingDetails: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport interface P24Params {\n  paymentMethodType: 'P24';\n  paymentMethodData: {\n    billingDetails: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport interface WeChatPayParams {\n  paymentMethodType: 'WeChatPay';\n  paymentMethodData: {\n    appId: string;\n    billingDetails?: BillingDetails;\n    mandateData?: MandateData;\n  };\n}\n\nexport interface AuBecsDebitParams {\n  paymentMethodType: 'AuBecsDebit';\n  paymentMethodData: { formDetails: FormDetails; mandateData?: MandateData };\n}\n\nexport type AffirmParams = {\n  paymentMethodType: 'Affirm';\n  paymentMethodData?: {\n    /** Affirm requires that shipping is present for the payment to succeed because it significantly helps with loan approval rates. Shipping details can either be provided here or via the Payment Intent- https://stripe.com/docs/api/payment_intents/create#create_payment_intent-shipping. */\n    shippingDetails?: BillingDetails;\n    billingDetails?: BillingDetails;\n    mandateData?: MandateData;\n  };\n};\n\n/**\n * If paymentMethodData is null, it is assumed that the bank account details have already been attached\n * via `collectBankAccountForPayment` or `collectBankAccountForSetup`.\n */\nexport type USBankAccountParams = {\n  paymentMethodType: 'USBankAccount';\n  paymentMethodData?: {\n    billingDetails: Pick<Required<BillingDetails>, 'name'> & BillingDetails;\n    accountNumber: string;\n    routingNumber: string;\n    /** Defaults to Individual */\n    accountHolderType?: BankAcccountHolderType;\n    /** Defaults to Checking */\n    accountType?: BankAcccountType;\n    mandateData?: MandateData;\n  };\n};\n\nexport type PayPalParams = {\n  paymentMethodType: 'PayPal';\n  paymentMethodData?: {\n    billingDetails?: BillingDetails;\n    mandateData?: MandateData;\n  };\n};\n\nexport type CashAppParams = {\n  paymentMethodType: 'CashApp';\n  paymentMethodData?: {\n    billingDetails?: BillingDetails;\n    mandateData?: MandateData;\n  };\n};\n\nexport type RevolutPayParams = {\n  paymentMethodType: 'RevolutPay';\n  paymentMethodData?: {\n    billingDetails?: BillingDetails;\n    mandateData?: MandateData;\n  };\n};\n\nexport type CollectBankAccountParams = {\n  paymentMethodType: 'USBankAccount';\n  paymentMethodData: {\n    billingDetails: {\n      name: string;\n      email?: string;\n    };\n    mandateData?: MandateData;\n  };\n};\n"],"mappings":"kFAsEYA,OAAM,iCAANA,MAAM,EAANA,MAAM,0BAANA,MAAM,kDAANA,MAAM,gDAANA,MAAM,wBAANA,MAAM,4BAANA,MAAM,oCAANA,MAAM,sCAANA,MAAM,yBAANA,MAAM,kBAANA,MAAM"}