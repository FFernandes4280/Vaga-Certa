{"version":3,"names":[],"sources":["CustomerSheet.ts"],"sourcesContent":["import type {\n  PaymentSheet,\n  StripeError,\n  CustomerSheetError,\n  BillingDetails,\n  PaymentMethod,\n  CardBrand,\n} from '../types';\n\nexport type CustomerSheetInitParams = {\n  /** The color styling to use for PaymentSheet UI. Defaults to 'automatic'. iOS only. */\n  style?: 'alwaysLight' | 'alwaysDark' | 'automatic';\n  /** Configuration for the look and feel of the UI. */\n  appearance?: PaymentSheet.AppearanceParams;\n  /** Optional but recommended for cards, required for other payment methods. The SetupIntent client secret that will be used to confirm a new payment method. If this is missing, you will only be able to add cards without authentication steps. */\n  setupIntentClientSecret?: string;\n  /** The identifier of the Stripe Customer object. See https://stripe.com/docs/api/customers/object#customer_object-id */\n  customerId: string;\n  /** A short-lived token that allows the SDK to access a Customer's payment methods. */\n  customerEphemeralKeySecret: string;\n  /** Your customer-facing business name. The default value is the name of your app. */\n  merchantDisplayName?: string;\n  /** Optional configuration for setting the header text of the Payment Method selection screen */\n  headerTextForSelectionScreen?: string;\n  /** CustomerSheet pre-populates fields with the values provided. If `billingDetailsCollectionConfiguration.attachDefaultsToPaymentMethod` is `true`, these values will be attached to the payment method even if they are not collected by the CustomerSheet UI. */\n  defaultBillingDetails?: BillingDetails;\n  /** Describes how billing details should be collected. All values default to `AUTOMATIC`. If `NEVER` is used for a required field for the Payment Method, you must provide an appropriate value as part of `defaultBillingDetails`. */\n  billingDetailsCollectionConfiguration?: PaymentSheet.BillingDetailsCollectionConfiguration;\n  /** A URL that redirects back to your app that CustomerSheet can use to auto-dismiss web views used for additional authentication, e.g. 3DS2 */\n  returnURL?: string;\n  /** Optional configuration to display a custom message when a saved payment method is removed. iOS only. */\n  removeSavedPaymentMethodMessage?: string;\n  /** Whether to show Apple Pay as an option. Defaults to false. */\n  applePayEnabled?: boolean;\n  /** Whether to show Google Pay as an option. Defaults to false. */\n  googlePayEnabled?: boolean;\n  /** The list of preferred networks that should be used to process payments made with a co-branded card.\n   * This value will only be used if your user hasn't selected a network themselves. */\n  preferredNetworks?: Array<CardBrand>;\n  /** Optional override. It is generally recommended to rely on the default behavior, but- provide a CustomerAdapter here if\n   * you would prefer retrieving and updating your Stripe customer object via your own backend instead.\n   * WARNING: When implementing your own CustomerAdapter, ensure your application complies with all applicable laws and regulations, including data privacy and consumer protection.\n   */\n  customerAdapter?: CustomerAdapter;\n  /** This is an experimental feature that may be removed at any time.\n   *  Defaults to true. If true, the customer can delete all saved payment methods.\n   *  If false, the customer can't delete if they only have one saved payment method remaining.\n   */\n  allowsRemovalOfLastSavedPaymentMethod?: boolean;\n};\n\nexport type CustomerSheetPresentParams = {\n  /** Controls how the modal is presented (after animation). iOS only. Defaults to `popover`. See https://developer.apple.com/documentation/uikit/uimodalpresentationstyle for more info. */\n  presentationStyle?:\n    | 'fullscreen'\n    | 'popover'\n    | 'pageSheet'\n    | 'formSheet'\n    | 'automatic'\n    | 'overFullScreen';\n  /** Controls how the modal animates. iOS only. */\n  animationStyle?: 'flip' | 'curl' | 'slide' | 'dissolve';\n  /** Time (in milliseconds) before the Customer Sheet will automatically dismiss. */\n  timeout?: number;\n};\n\nexport type CustomerSheetResult = {\n  /** The users selected payment option, if one exists. */\n  paymentOption?: PaymentSheet.PaymentOption;\n  /** The Stripe PaymentMethod associated with the paymentOption, if it exists. */\n  paymentMethod?: PaymentMethod.Result;\n  /** The error that occurred. */\n  error?: StripeError<CustomerSheetError>;\n};\n\nexport interface CustomerAdapter {\n  /** Retrieves a list of Payment Methods attached to a customer.\n   * If you are implementing your own CustomerAdapter:\n   * Call the list method ( https://stripe.com/docs/api/payment_methods/list )\n   * with the Stripe customer. Return the list of payment methods in JSON format.\n   */\n  fetchPaymentMethods?(): Promise<Array<object>>;\n  /** Adds a Payment Method to a customer.\n   * If you are implementing your own CustomerAdapter:\n   * On your backend, retrieve the Stripe customer associated with your logged-in user.\n   * Then, call the Attach method on the Payment Method with that customer's ID\n   * ( https://stripe.com/docs/api/payment_methods/attach ).\n   * - Parameters:\n   *   - paymentMethod:   A valid Stripe Payment Method ID\n   * Return the payment method in JSON format.\n   */\n  attachPaymentMethod?(paymentMethodId: string): Promise<object>;\n  /** Deletes the given Payment Method from the customer.\n   * If you are implementing your own CustomerAdapter:\n   * Call the Detach method ( https://stripe.com/docs/api/payment_methods/detach )\n   * on the Payment Method.\n   * - Parameters:\n   *   - paymentMethod:   The Stripe Payment Method ID to delete from the customer\n   * Return the payment method in JSON format.\n   */\n  detachPaymentMethod?(paymentMethodId: String): Promise<object>;\n  /** Set the last selected payment method for the customer.\n   * To unset the default payment method, `null` is passed as the `paymentOption`.\n   * If you are implementing your own CustomerAdapter:\n   * Save a representation of the passed `paymentOption` as the customer's default payment method.\n   */\n  setSelectedPaymentOption?(\n    paymentOption: CustomerPaymentOption | null\n  ): Promise<void>;\n  /** Retrieve the last selected payment method for the customer.\n   * If you are implementing your own CustomerAdapter:\n   * Return a CustomerPaymentOption for the customer's default selected payment method.\n   * If no default payment method is selected, return null.\n   */\n  fetchSelectedPaymentOption?(): Promise<CustomerPaymentOption | null>;\n  /** Creates a SetupIntent configured to attach a new payment method to a customer,\n   * then returns the client secret for the created SetupIntent.\n   */\n  setupIntentClientSecretForCustomerAttach?(): Promise<String>;\n}\n\nexport type CustomerPaymentOption =\n  | 'apple_pay'\n  | 'google_pay'\n  | 'link'\n  | string;\n"],"mappings":""}