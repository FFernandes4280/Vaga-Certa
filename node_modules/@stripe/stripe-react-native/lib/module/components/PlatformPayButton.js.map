{"version":3,"names":["PlatformPayButton","type","ButtonType","Default","appearance","ButtonStyle","Automatic","onPress","disabled","borderRadius","onShippingMethodSelected","onShippingContactSelected","onCouponCodeEntered","setOrderTracking","style","props","shippingMethodCallback","value","nativeEvent","undefined","shippingContactCallback","couponCodeCallback","orderTrackingCallback","NativeStripeSdk","configureOrderTracking","styles","notDisabled","Platform","OS","nativeButtonStyle","StyleSheet","create","flex","opacity"],"sources":["PlatformPayButton.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  AccessibilityProps,\n  StyleProp,\n  ViewStyle,\n  TouchableOpacity,\n  StyleSheet,\n  Platform,\n  NativeSyntheticEvent,\n} from 'react-native';\nimport NativeStripeSdk from '../NativeStripeSdk';\nimport {\n  ButtonType,\n  ButtonStyle,\n  ShippingMethod,\n  ShippingContact,\n} from '../types/PlatformPay';\nimport GooglePayButtonNative from './GooglePayButtonNative';\nimport ApplePayButtonNative from './ApplePayButtonNative';\n\n/**\n *  PlatformPayButton Component Props\n */\nexport interface Props extends AccessibilityProps {\n  /** Sets the text displayed by the button. */\n  type?: ButtonType;\n  /** Sets the coloring of the button. */\n  appearance?: ButtonStyle;\n  /** Sets the border radius of the button. */\n  borderRadius?: number;\n  /** Function called whenever the button is pressed. */\n  onPress(): void;\n  /** Set to `true` to disable the button from being pressed & apply a slight opacity to indicate that it is unpressable. Defaults to false. */\n  disabled?: boolean;\n  /**\n   * This callback is triggered whenever the user selects a shipping method in the Apple Pay sheet.\n   * It receives one parameter: an `event` object with a `shippingMethod` field. You MUST\n   * update the Apple Pay sheet in your callback using the updatePlatformPaySheet function, otherwise the\n   * Apple Pay sheet will hang and the payment flow will automatically cancel.\n   */\n  onShippingMethodSelected?: (event: {\n    shippingMethod: ShippingMethod;\n  }) => void;\n  /**\n   * This callback is triggered whenever the user selects a shipping contact in the Apple Pay sheet IF\n   * ContactField.PostalAddress was included in the requiredShippingAddressFields array.\n   * It receives one parameter: an `event` object with a `shippingContact` field. You MUST\n   * update the Apple Pay sheet in your callback using the updatePlatformPaySheet function, otherwise the\n   * Apple Pay sheet will hang and the payment flow will automatically cancel.\n   */\n  onShippingContactSelected?: (event: {\n    shippingContact: ShippingContact;\n  }) => void;\n  /**\n   * This callback is triggered whenever the user inputs a coupon code in the Apple Pay sheet.\n   * It receives one parameter: an `event` object with a `couponCode` field. You MUST\n   * update the Apple Pay sheet in your callback using the updatePlatformPaySheet function, otherwise the\n   * Apple Pay sheet will hang and the payment flow will automatically cancel.\n   */\n  onCouponCodeEntered?: (event: { couponCode: string }) => void;\n  /** Callback function for setting the order details (retrieved from your server) to give users the\n   * ability to track and manage their purchases in Wallet. Stripe calls your implementation after the\n   * payment is complete, but before iOS dismisses the Apple Pay sheet. You must call the `completion`\n   * function, or else the Apple Pay sheet will hang.*/\n  setOrderTracking?: (\n    completion: (\n      orderIdentifier: string,\n      orderTypeIdentifier: string,\n      authenticationToken: string,\n      webServiceUrl: string\n    ) => void\n  ) => void;\n  testID?: string;\n  style?: StyleProp<ViewStyle>;\n}\n\n/**\n *  PlatformPayButton Component. Display the platform-specific native wallet pay button: Apple Pay on iOS, and Google Pay on Android.\n *\n * @example\n * ```ts\n *  <PlatformPayButton\n *    onPress={pay}\n *    type={PlatformPay.ButtonType.Subscribe}\n *    appearance={PlatformPay.ButtonStyle.WhiteOutline}\n *    borderRadius={4}\n *    disabled={!isApplePaySupported}\n *    style={styles.payButton}\n *  />\n * ```\n * @param __namedParameters Props\n * @returns JSX.Element\n * @category ReactComponents\n */\nexport function PlatformPayButton({\n  type = ButtonType.Default,\n  appearance = ButtonStyle.Automatic,\n  onPress,\n  disabled,\n  borderRadius,\n  onShippingMethodSelected,\n  onShippingContactSelected,\n  onCouponCodeEntered,\n  setOrderTracking,\n  style,\n  ...props\n}: Props) {\n  const shippingMethodCallback = onShippingMethodSelected\n    ? (\n        value: NativeSyntheticEvent<{\n          shippingMethod: ShippingMethod;\n        }>\n      ) => {\n        onShippingMethodSelected && onShippingMethodSelected(value.nativeEvent);\n      }\n    : undefined;\n\n  const shippingContactCallback = onShippingContactSelected\n    ? (\n        value: NativeSyntheticEvent<{\n          shippingContact: ShippingContact;\n        }>\n      ) => {\n        onShippingContactSelected(value.nativeEvent);\n      }\n    : undefined;\n\n  const couponCodeCallback = onCouponCodeEntered\n    ? (\n        value: NativeSyntheticEvent<{\n          couponCode: string;\n        }>\n      ) => {\n        onCouponCodeEntered && onCouponCodeEntered(value.nativeEvent);\n      }\n    : undefined;\n\n  const orderTrackingCallback = setOrderTracking\n    ? () => {\n        setOrderTracking(NativeStripeSdk.configureOrderTracking);\n      }\n    : undefined;\n\n  return (\n    <TouchableOpacity\n      disabled={disabled}\n      activeOpacity={disabled ? 0.3 : 1}\n      onPress={onPress}\n      style={[disabled ? styles.disabled : styles.notDisabled, style]}\n    >\n      {Platform.OS === 'ios' ? (\n        <ApplePayButtonNative\n          type={type}\n          buttonStyle={appearance}\n          borderRadius={borderRadius}\n          disabled={disabled}\n          onShippingMethodSelectedAction={shippingMethodCallback}\n          onShippingContactSelectedAction={shippingContactCallback}\n          onCouponCodeEnteredAction={couponCodeCallback}\n          onOrderTrackingAction={orderTrackingCallback}\n          style={styles.nativeButtonStyle}\n          {...props}\n        />\n      ) : (\n        <GooglePayButtonNative\n          type={type}\n          appearance={appearance}\n          borderRadius={borderRadius}\n          style={styles.nativeButtonStyle}\n          {...props}\n        />\n      )}\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  disabled: {\n    flex: 0,\n    opacity: 0.4,\n  },\n  notDisabled: {\n    flex: 0,\n  },\n  nativeButtonStyle: { flex: 1 },\n});\n"],"mappings":"wXAAA,oDACA,yCASA,2EACA,iDAMA,sFACA,oFAA0D,wRA4EnD,QAASA,kBAAiB,MAYvB,oBAXRC,IAAI,CAAJA,IAAI,oBAAGC,uBAAU,CAACC,OAAO,gCACzBC,UAAU,CAAVA,UAAU,0BAAGC,wBAAW,CAACC,SAAS,iBAClCC,OAAO,MAAPA,OAAO,CACPC,QAAQ,MAARA,QAAQ,CACRC,YAAY,MAAZA,YAAY,CACZC,wBAAwB,MAAxBA,wBAAwB,CACxBC,yBAAyB,MAAzBA,yBAAyB,CACzBC,mBAAmB,MAAnBA,mBAAmB,CACnBC,gBAAgB,MAAhBA,gBAAgB,CAChBC,KAAK,MAALA,KAAK,CACFC,KAAK,uDAER,GAAMC,uBAAsB,CAAGN,wBAAwB,CACnD,SACEO,KAEE,CACC,CACHP,wBAAwB,EAAIA,wBAAwB,CAACO,KAAK,CAACC,WAAW,CAAC,CACzE,CAAC,CACDC,SAAS,CAEb,GAAMC,wBAAuB,CAAGT,yBAAyB,CACrD,SACEM,KAEE,CACC,CACHN,yBAAyB,CAACM,KAAK,CAACC,WAAW,CAAC,CAC9C,CAAC,CACDC,SAAS,CAEb,GAAME,mBAAkB,CAAGT,mBAAmB,CAC1C,SACEK,KAEE,CACC,CACHL,mBAAmB,EAAIA,mBAAmB,CAACK,KAAK,CAACC,WAAW,CAAC,CAC/D,CAAC,CACDC,SAAS,CAEb,GAAMG,sBAAqB,CAAGT,gBAAgB,CAC1C,UAAM,CACJA,gBAAgB,CAACU,wBAAe,CAACC,sBAAsB,CAAC,CAC1D,CAAC,CACDL,SAAS,CAEb,MACE,8BAAC,6BAAgB,EACf,QAAQ,CAAEX,QAAS,CACnB,aAAa,CAAEA,QAAQ,CAAG,GAAG,CAAG,CAAE,CAClC,OAAO,CAAED,OAAQ,CACjB,KAAK,CAAE,CAACC,QAAQ,CAAGiB,MAAM,CAACjB,QAAQ,CAAGiB,MAAM,CAACC,WAAW,CAAEZ,KAAK,CAAE,6EAE/Da,qBAAQ,CAACC,EAAE,GAAK,KAAK,CACpB,6BAAC,6BAAoB,wBACnB,IAAI,CAAE3B,IAAK,CACX,WAAW,CAAEG,UAAW,CACxB,YAAY,CAAEK,YAAa,CAC3B,QAAQ,CAAED,QAAS,CACnB,8BAA8B,CAAEQ,sBAAuB,CACvD,+BAA+B,CAAEI,uBAAwB,CACzD,yBAAyB,CAAEC,kBAAmB,CAC9C,qBAAqB,CAAEC,qBAAsB,CAC7C,KAAK,CAAEG,MAAM,CAACI,iBAAkB,EAC5Bd,KAAK,+EACT,CAEF,6BAAC,8BAAqB,wBACpB,IAAI,CAAEd,IAAK,CACX,UAAU,CAAEG,UAAW,CACvB,YAAY,CAAEK,YAAa,CAC3B,KAAK,CAAEgB,MAAM,CAACI,iBAAkB,EAC5Bd,KAAK,+EAEZ,CACgB,CAEvB,CAEA,GAAMU,OAAM,CAAGK,uBAAU,CAACC,MAAM,CAAC,CAC/BvB,QAAQ,CAAE,CACRwB,IAAI,CAAE,CAAC,CACPC,OAAO,CAAE,GACX,CAAC,CACDP,WAAW,CAAE,CACXM,IAAI,CAAE,CACR,CAAC,CACDH,iBAAiB,CAAE,CAAEG,IAAI,CAAE,CAAE,CAC/B,CAAC,CAAC"}