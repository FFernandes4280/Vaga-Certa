{"version":3,"names":["AddToWalletButtonNative","requireNativeComponent","AddToWalletButton","onComplete","props","value","nativeEvent"],"sources":["AddToWalletButton.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  AccessibilityProps,\n  StyleProp,\n  ViewStyle,\n  requireNativeComponent,\n  NativeSyntheticEvent,\n  ImageSourcePropType,\n} from 'react-native';\nimport type {\n  Token,\n  CardActionError,\n  StripeError,\n  GooglePayCardToken,\n} from '../types';\n\nconst AddToWalletButtonNative =\n  requireNativeComponent<any>('AddToWalletButton');\n\n/**\n *  Add to wallet button component props\n */\nexport interface Props extends AccessibilityProps {\n  style?: StyleProp<ViewStyle>;\n  /** Sets the Apple Wallet/Google Pay button style. If the button is placed over a dark background, set this to 'onDarkBackground', otherwise set to 'onLightBackground'. */\n  iOSButtonStyle?: 'onDarkBackground' | 'onLightBackground';\n  /** The image asset to use as the Google Pay button. Downloadable from https://developers.google.com/static/pay/issuers/apis/push-provisioning/android/downloads/flutter/2022_googlepay_flutter_buttons.zip  */\n  androidAssetSource: ImageSourcePropType;\n  testID?: string;\n  /** iOS only. Set this to `true` until shipping through TestFlight || App Store. If false, you must be using live cards, and have the proper iOS entitlement set up. See https://stripe.com/docs/issuing/cards/digital-wallets?platform=react-native#requesting-access-for-ios */\n  testEnv?: boolean;\n  /** Details of the Issued Card you'd like added to the device's wallet */\n  cardDetails: {\n    /** The `primary_account_identifier` value from the issued card. */\n    primaryAccountIdentifier: string | null;\n    /** The card holder name (used only on iOS) */\n    name: string;\n    /** A user-facing description of the card. Required on Android.*/\n    description: string;\n    /** Last 4 digits of the card, only used on iOS */\n    lastFour?: string;\n    /** Optional, only used on iOS */\n    brand?: Token.CardBrand;\n  };\n  // Optional, only for Android and only for cards that are in the \"yellow path\" (as defined by Google- https://developers.google.com/pay/issuers/apis/push-provisioning/android/wallet-operations#resolving_yellow_path). Obtain this value via the `isCardInWallet` method.\n  token?: GooglePayCardToken | null;\n  /** Used by stripe to securely obtain card info of the card being provisioned. */\n  ephemeralKey: object;\n  /** Called when the flow completes. If the `error` field is `null`, then the card was successfully added to the user's native wallet. */\n  onComplete(result: { error: StripeError<CardActionError> | null }): void;\n}\n\n/**\n *  Add to wallet button\n *\n * @example\n * ```ts\n *  <AddToWalletButton\n *    testEnv={true}\n *    style={styles.myButtonStyle}\n *    iOSButtonStyle=\"onLightBackground\"\n *    cardDetails={{\n *      primaryAccountIdentifier: \"V-123\",\n *      name: \"David Wallace\",\n *      lastFour: \"4242\",\n *    }}\n *    ephemeralKey={myEphemeralKey} // This object is retrieved from your server. See https://stripe.com/docs/issuing/cards/digital-wallets?platform=react-native#update-your-backend\n *    onComplete={(error) => {\n *      Alert.alert(\n *        error ? error.code : 'Success',\n *        error\n *          ? error.message\n *          : 'Card was successfully added to the wallet.'\n *      );\n *    }}\n *  />\n * ```\n * @param __namedParameters Props\n * @returns JSX.Element\n * @category ReactComponents\n */\nexport function AddToWalletButton({ onComplete, ...props }: Props) {\n  return (\n    <AddToWalletButtonNative\n      {...props}\n      onCompleteAction={(\n        value: NativeSyntheticEvent<{\n          error: StripeError<CardActionError> | null;\n        }>\n      ) => onComplete(value.nativeEvent)}\n    />\n  );\n}\n"],"mappings":"wXAAA,oDACA,yCAOsB,qIAQtB,GAAMA,wBAAuB,CAC3B,GAAAC,mCAAsB,EAAM,mBAAmB,CAAC,CAgE3C,QAASC,kBAAiB,MAAkC,IAA/BC,WAAU,MAAVA,UAAU,CAAKC,KAAK,uDACtD,MACE,8BAAC,uBAAuB,0BAClBA,KAAK,EACT,gBAAgB,CAAE,0BAChBC,KAEE,QACCF,WAAU,CAACE,KAAK,CAACC,WAAW,CAAC,EAAC,6EACnC,CAEN"}